================================================================================================================

Quest√£o 1. No contexto das vari√°veis na linguagem de programa√ß√£o Java, 
explique o que √© atribui√ß√£o por valor e atribui√ß√£o por refer√™ncia, cite 
exemplos com vari√°veis de ambos os casos.

   Atribui√ß√£o por valor √© quando voc√™ atribui a uma vari√°vel um valor comum.
   Exemplo: 
   int a = 5;.
   J√° atribui√ß√£o por referencia √© quando voc√™ atribui um endere√ßo de mem√≥ria √°
   uma vari√°vel.
   Exemplo:
   int a = 5;
   int b = a;
   Agora, se eu manipular a minha vari√°vel b, estarem mexendo no valor que seu
   endere√ßo aponta, que √© o a, o que modifica tamb√©m a vari√°vel a.

================================================================================================================

Quest√£o 2. Escreva o que ser√° impresso com o c√≥digo abaixo

O c√≥digo vai nos retornar um vetor de 12 posi√ß√µes da seguinte forma:
{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89}

Como?

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] vetor = new int[12]; //declarando o vetor
        vetor[0] = 0; //atribuindo valor ao index 0 do vetor
        vetor[1] = 1; //atribuindo valor ao index 1 do vetor
        for(int i = 2; i<vetor.length;i++){ // percorre o vetor a partir do elemento 2, preenchendo seus indexs.
            vetor[i] = vetor[i-1]+vetor[i-2]; // condi√ß√µes e preenchimento de index
        }
        System.out.println(Arrays.toString(vetor)); //mostra o vetor na tela
    }
}

================================================================================================================

Quest√£o 3. Escreva uma fun√ß√£o em linguagem de programa√ß√£o Java que recebe como par√¢metro um n√∫mero 
inteiro positivo e verifica se ele √© par ou √≠mpar. Caso o n√∫mero seja par ele retorna true e caso 
seja √≠mpar retorna false.

//resposta na pasta
================================================================================================================

Quest√£o 4. Defina o conceito de encapsulamento em linguagem de programa√ß√£o Java. 
Cite exemplos utilizando vari√°veis.

   Encapsulamento √© a forma com que a vari√°vel est√° disponibilizada para seu c√≥digo.
   Temos tr√™s tipos de encapsulamentos em Java: Public, Private e Protected.
   O encapsulamento Public √© quando temos uma vari√°vel e queremos que ela possa ser
   ser acessada em todo nosso Package.
   Por exemplo:
   public String name = "Mariana";
   J√° o Private, √© quando queremos que essa vari√°vel possa ser acessada e modificada
   apenas na Classe em que foi declarada.
   Por exemplo:
   private String senha;
   E o Protected, usamos tamb√©m para que a vari√°vel seja "vista" apenas pela classe
   em que foi criada, por√©m, ela tamb√©m pode ser acessada por suas classes filhas.
   Por exemplo:
   protected Integer size = 0;

================================================================================================================

Quest√£o 5. Defina o conceito de heran√ßa em linguagem de programa√ß√£o Java. Cite exemplos utilizando classes

   Heran√ßa refere-se a quando temos uma classe pai, que possui atributos e m√©todos, e possu√≠mos tamb√©m
   Classes filhas, que herdam esses atributos e m√©todos da classe pai.
   Por exemplo, podemos ter uma 'class Animal{...}' que possui o atributo 'public int patas = 4;' e o m√©todo
   'Comer(){...}', pois todos os animais comem. A√≠ criamos uma classe filho a partir dessa classe pai, por
   exemplo, 'class Cachorro{...}', que herdar√° os atributos e m√©todos da classe pai, ou seja, cachorro tem
   4 patas e pode comer. E podemos adicionar novos m√©todos e atributos a classe Cachorro, por exemplo
   'public String nome;' e 'Latir(){...}'. Agora o cachorro tamb√©m tem um nome e pode latir, o que n√£o
   interfere no corpo da classe pai ou de outros filhos dessa mesma classe pai.

================================================================================================================

Quest√£o 6. Implemente uma classe para representar um conjunto matem√°tico de n√∫meros, abstrata chamada Set. 
Ou seja, o objeto da classe deve ser capaz de apontar quando um elemento est√° dentro de si ou n√£o. Ou seja, 
implementar a seguinte fun√ß√£o:
‚Ä¢ contains(Float), que diz se um elemento pertence ao conjunto;
Para esse desafio voc√™ implementar√° duas classes filhas de Set, a classe NumberSet usando um HashSet<Double> 
e a IntersectionSet que possui 2 Sets internos. Um conjunto intersec√ß√£o possui um elemento se os dois conjuntos 
internos possu√≠rem o elemento.
Adicionalmente, crie a fun√ß√£o est√°tica intersect(Set, Set) em uma classe chamada Sets (no plural) que retorna 
um IntersectionSet.

//resposta na pasta
================================================================================================================

Quest√£o 7. Voc√™ deseja calcular o valor de PI, ent√£o √© dito a voc√™ que voc√™ pode calcular este valor usando a 
classe Random que pode ser usada da seguinte forma:

import java.util.Random;
public class Main
{
	public static void main(String[] args)
	{
		var rand = new Random();
		var value = rand.nextFloat(); // retorna valor aleat√≥rio entre 0 e 1
	}
}

Para que voc√™ possa aproximar PI √© dito que voc√™ s√≥ precisa sortear pontos aleat√≥rios em um quadrado de tamanho 1x1. 
Para fazer isso basta sortear um valor para x e para y. Ent√£o teste quantos destes pontos est√£o dentro do quarto de 
c√≠rculo unit√°rio dentro do quadrado, ou seja, quantos pontos (x, y) atendem a condi√ß√£o: ‚àöùë•2+ùë¶2<1.
Ap√≥s isso, basta multiplicar o resultado por 4 e printar e voc√™ ter√° PI.

Use o Scanner para pedir ao usu√°rio quantos pontos voc√™ ir√° usar para realizar a simula√ß√£o. 
Lembre-se de usar try-catch para impedir exce√ß√µes do tipo NumberFormat e InputMismatch.

//resposta na pasta
================================================================================================================


Quest√£o 8. Abstraia um Trem usando orienta√ß√£o a objetos em Java. Cada trem possui uma liga√ß√£o com o primeiro vag√£o 
e cada vag√£o deve possuir uma liga√ß√£o com o vag√£o anterior e o pr√≥ximo vag√£o. Um vag√£o pode n√£o ter um pr√≥ximo vag√£o 
e deve receber o valor Null na sua liga√ß√£o. Para o conte√∫do do vag√£o utilize um Enum chamado TrainContent para as 
possibilidades de: Vazio, Combust√≠vel, Trigo, Animais ou Passageiros. Al√©m disso, o trem deve possuir as seguintes fun√ß√µes:
‚Ä¢ count(TrainContent): Conta quantos vag√µes possuem um determinado conte√∫do retornando um inteiro.
‚Ä¢ Add(TrainContent): Adiciona um vag√£o com um conte√∫do espec√≠fico.
Voc√™ n√£o deve usa uma lista ou um vetor, mas sim relacionar cada objeto da classe vag√£o.

//resposta na pasta
================================================================================================================



boa corre√ß√£o :b